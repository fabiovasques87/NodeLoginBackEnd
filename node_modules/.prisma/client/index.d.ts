
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Funcao
 * 
 */
export type Funcao = $Result.DefaultSelection<Prisma.$FuncaoPayload>
/**
 * Model UserFuncao
 * 
 */
export type UserFuncao = $Result.DefaultSelection<Prisma.$UserFuncaoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.funcao`: Exposes CRUD operations for the **Funcao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Funcaos
    * const funcaos = await prisma.funcao.findMany()
    * ```
    */
  get funcao(): Prisma.FuncaoDelegate<ExtArgs>;

  /**
   * `prisma.userFuncao`: Exposes CRUD operations for the **UserFuncao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserFuncaos
    * const userFuncaos = await prisma.userFuncao.findMany()
    * ```
    */
  get userFuncao(): Prisma.UserFuncaoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.5.2
   * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Funcao: 'Funcao',
    UserFuncao: 'UserFuncao'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'funcao' | 'userFuncao'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Funcao: {
        payload: Prisma.$FuncaoPayload<ExtArgs>
        fields: Prisma.FuncaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FuncaoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FuncaoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncaoPayload>
          }
          findFirst: {
            args: Prisma.FuncaoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FuncaoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncaoPayload>
          }
          findMany: {
            args: Prisma.FuncaoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncaoPayload>[]
          }
          create: {
            args: Prisma.FuncaoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncaoPayload>
          }
          createMany: {
            args: Prisma.FuncaoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FuncaoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncaoPayload>
          }
          update: {
            args: Prisma.FuncaoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncaoPayload>
          }
          deleteMany: {
            args: Prisma.FuncaoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FuncaoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FuncaoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncaoPayload>
          }
          aggregate: {
            args: Prisma.FuncaoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFuncao>
          }
          groupBy: {
            args: Prisma.FuncaoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FuncaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.FuncaoCountArgs<ExtArgs>,
            result: $Utils.Optional<FuncaoCountAggregateOutputType> | number
          }
        }
      }
      UserFuncao: {
        payload: Prisma.$UserFuncaoPayload<ExtArgs>
        fields: Prisma.UserFuncaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFuncaoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFuncaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFuncaoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFuncaoPayload>
          }
          findFirst: {
            args: Prisma.UserFuncaoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFuncaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFuncaoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFuncaoPayload>
          }
          findMany: {
            args: Prisma.UserFuncaoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFuncaoPayload>[]
          }
          create: {
            args: Prisma.UserFuncaoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFuncaoPayload>
          }
          createMany: {
            args: Prisma.UserFuncaoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserFuncaoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFuncaoPayload>
          }
          update: {
            args: Prisma.UserFuncaoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFuncaoPayload>
          }
          deleteMany: {
            args: Prisma.UserFuncaoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserFuncaoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserFuncaoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserFuncaoPayload>
          }
          aggregate: {
            args: Prisma.UserFuncaoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserFuncao>
          }
          groupBy: {
            args: Prisma.UserFuncaoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserFuncaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserFuncaoCountArgs<ExtArgs>,
            result: $Utils.Optional<UserFuncaoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    userFuncao: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userFuncao?: boolean | UserCountOutputTypeCountUserFuncaoArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserFuncaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFuncaoWhereInput
  }



  /**
   * Count Type FuncaoCountOutputType
   */

  export type FuncaoCountOutputType = {
    userFuncao: number
  }

  export type FuncaoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userFuncao?: boolean | FuncaoCountOutputTypeCountUserFuncaoArgs
  }

  // Custom InputTypes

  /**
   * FuncaoCountOutputType without action
   */
  export type FuncaoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuncaoCountOutputType
     */
    select?: FuncaoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FuncaoCountOutputType without action
   */
  export type FuncaoCountOutputTypeCountUserFuncaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFuncaoWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    userFuncao?: boolean | User$userFuncaoArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userFuncao?: boolean | User$userFuncaoArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      userFuncao: Prisma.$UserFuncaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    userFuncao<T extends User$userFuncaoArgs<ExtArgs> = {}>(args?: Subset<T, User$userFuncaoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFuncaoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.userFuncao
   */
  export type User$userFuncaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFuncao
     */
    select?: UserFuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFuncaoInclude<ExtArgs> | null
    where?: UserFuncaoWhereInput
    orderBy?: UserFuncaoOrderByWithRelationInput | UserFuncaoOrderByWithRelationInput[]
    cursor?: UserFuncaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserFuncaoScalarFieldEnum | UserFuncaoScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Funcao
   */

  export type AggregateFuncao = {
    _count: FuncaoCountAggregateOutputType | null
    _avg: FuncaoAvgAggregateOutputType | null
    _sum: FuncaoSumAggregateOutputType | null
    _min: FuncaoMinAggregateOutputType | null
    _max: FuncaoMaxAggregateOutputType | null
  }

  export type FuncaoAvgAggregateOutputType = {
    id: number | null
  }

  export type FuncaoSumAggregateOutputType = {
    id: number | null
  }

  export type FuncaoMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type FuncaoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type FuncaoCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type FuncaoAvgAggregateInputType = {
    id?: true
  }

  export type FuncaoSumAggregateInputType = {
    id?: true
  }

  export type FuncaoMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type FuncaoMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type FuncaoCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type FuncaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Funcao to aggregate.
     */
    where?: FuncaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcaos to fetch.
     */
    orderBy?: FuncaoOrderByWithRelationInput | FuncaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FuncaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Funcaos
    **/
    _count?: true | FuncaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FuncaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FuncaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FuncaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FuncaoMaxAggregateInputType
  }

  export type GetFuncaoAggregateType<T extends FuncaoAggregateArgs> = {
        [P in keyof T & keyof AggregateFuncao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFuncao[P]>
      : GetScalarType<T[P], AggregateFuncao[P]>
  }




  export type FuncaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FuncaoWhereInput
    orderBy?: FuncaoOrderByWithAggregationInput | FuncaoOrderByWithAggregationInput[]
    by: FuncaoScalarFieldEnum[] | FuncaoScalarFieldEnum
    having?: FuncaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FuncaoCountAggregateInputType | true
    _avg?: FuncaoAvgAggregateInputType
    _sum?: FuncaoSumAggregateInputType
    _min?: FuncaoMinAggregateInputType
    _max?: FuncaoMaxAggregateInputType
  }

  export type FuncaoGroupByOutputType = {
    id: number
    nome: string
    _count: FuncaoCountAggregateOutputType | null
    _avg: FuncaoAvgAggregateOutputType | null
    _sum: FuncaoSumAggregateOutputType | null
    _min: FuncaoMinAggregateOutputType | null
    _max: FuncaoMaxAggregateOutputType | null
  }

  type GetFuncaoGroupByPayload<T extends FuncaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FuncaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FuncaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FuncaoGroupByOutputType[P]>
            : GetScalarType<T[P], FuncaoGroupByOutputType[P]>
        }
      >
    >


  export type FuncaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    userFuncao?: boolean | Funcao$userFuncaoArgs<ExtArgs>
    _count?: boolean | FuncaoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["funcao"]>

  export type FuncaoSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type FuncaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userFuncao?: boolean | Funcao$userFuncaoArgs<ExtArgs>
    _count?: boolean | FuncaoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $FuncaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Funcao"
    objects: {
      userFuncao: Prisma.$UserFuncaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["funcao"]>
    composites: {}
  }


  type FuncaoGetPayload<S extends boolean | null | undefined | FuncaoDefaultArgs> = $Result.GetResult<Prisma.$FuncaoPayload, S>

  type FuncaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FuncaoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: FuncaoCountAggregateInputType | true
    }

  export interface FuncaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Funcao'], meta: { name: 'Funcao' } }
    /**
     * Find zero or one Funcao that matches the filter.
     * @param {FuncaoFindUniqueArgs} args - Arguments to find a Funcao
     * @example
     * // Get one Funcao
     * const funcao = await prisma.funcao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FuncaoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FuncaoFindUniqueArgs<ExtArgs>>
    ): Prisma__FuncaoClient<$Result.GetResult<Prisma.$FuncaoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Funcao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FuncaoFindUniqueOrThrowArgs} args - Arguments to find a Funcao
     * @example
     * // Get one Funcao
     * const funcao = await prisma.funcao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FuncaoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncaoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FuncaoClient<$Result.GetResult<Prisma.$FuncaoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Funcao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncaoFindFirstArgs} args - Arguments to find a Funcao
     * @example
     * // Get one Funcao
     * const funcao = await prisma.funcao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FuncaoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncaoFindFirstArgs<ExtArgs>>
    ): Prisma__FuncaoClient<$Result.GetResult<Prisma.$FuncaoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Funcao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncaoFindFirstOrThrowArgs} args - Arguments to find a Funcao
     * @example
     * // Get one Funcao
     * const funcao = await prisma.funcao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FuncaoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncaoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FuncaoClient<$Result.GetResult<Prisma.$FuncaoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Funcaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Funcaos
     * const funcaos = await prisma.funcao.findMany()
     * 
     * // Get first 10 Funcaos
     * const funcaos = await prisma.funcao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const funcaoWithIdOnly = await prisma.funcao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FuncaoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncaoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FuncaoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Funcao.
     * @param {FuncaoCreateArgs} args - Arguments to create a Funcao.
     * @example
     * // Create one Funcao
     * const Funcao = await prisma.funcao.create({
     *   data: {
     *     // ... data to create a Funcao
     *   }
     * })
     * 
    **/
    create<T extends FuncaoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FuncaoCreateArgs<ExtArgs>>
    ): Prisma__FuncaoClient<$Result.GetResult<Prisma.$FuncaoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Funcaos.
     *     @param {FuncaoCreateManyArgs} args - Arguments to create many Funcaos.
     *     @example
     *     // Create many Funcaos
     *     const funcao = await prisma.funcao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FuncaoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncaoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Funcao.
     * @param {FuncaoDeleteArgs} args - Arguments to delete one Funcao.
     * @example
     * // Delete one Funcao
     * const Funcao = await prisma.funcao.delete({
     *   where: {
     *     // ... filter to delete one Funcao
     *   }
     * })
     * 
    **/
    delete<T extends FuncaoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FuncaoDeleteArgs<ExtArgs>>
    ): Prisma__FuncaoClient<$Result.GetResult<Prisma.$FuncaoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Funcao.
     * @param {FuncaoUpdateArgs} args - Arguments to update one Funcao.
     * @example
     * // Update one Funcao
     * const funcao = await prisma.funcao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FuncaoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FuncaoUpdateArgs<ExtArgs>>
    ): Prisma__FuncaoClient<$Result.GetResult<Prisma.$FuncaoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Funcaos.
     * @param {FuncaoDeleteManyArgs} args - Arguments to filter Funcaos to delete.
     * @example
     * // Delete a few Funcaos
     * const { count } = await prisma.funcao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FuncaoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncaoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Funcaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Funcaos
     * const funcao = await prisma.funcao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FuncaoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FuncaoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Funcao.
     * @param {FuncaoUpsertArgs} args - Arguments to update or create a Funcao.
     * @example
     * // Update or create a Funcao
     * const funcao = await prisma.funcao.upsert({
     *   create: {
     *     // ... data to create a Funcao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Funcao we want to update
     *   }
     * })
    **/
    upsert<T extends FuncaoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FuncaoUpsertArgs<ExtArgs>>
    ): Prisma__FuncaoClient<$Result.GetResult<Prisma.$FuncaoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Funcaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncaoCountArgs} args - Arguments to filter Funcaos to count.
     * @example
     * // Count the number of Funcaos
     * const count = await prisma.funcao.count({
     *   where: {
     *     // ... the filter for the Funcaos we want to count
     *   }
     * })
    **/
    count<T extends FuncaoCountArgs>(
      args?: Subset<T, FuncaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FuncaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Funcao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FuncaoAggregateArgs>(args: Subset<T, FuncaoAggregateArgs>): Prisma.PrismaPromise<GetFuncaoAggregateType<T>>

    /**
     * Group by Funcao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FuncaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FuncaoGroupByArgs['orderBy'] }
        : { orderBy?: FuncaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FuncaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFuncaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Funcao model
   */
  readonly fields: FuncaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Funcao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FuncaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    userFuncao<T extends Funcao$userFuncaoArgs<ExtArgs> = {}>(args?: Subset<T, Funcao$userFuncaoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFuncaoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Funcao model
   */ 
  interface FuncaoFieldRefs {
    readonly id: FieldRef<"Funcao", 'Int'>
    readonly nome: FieldRef<"Funcao", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Funcao findUnique
   */
  export type FuncaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcao
     */
    select?: FuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FuncaoInclude<ExtArgs> | null
    /**
     * Filter, which Funcao to fetch.
     */
    where: FuncaoWhereUniqueInput
  }


  /**
   * Funcao findUniqueOrThrow
   */
  export type FuncaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcao
     */
    select?: FuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FuncaoInclude<ExtArgs> | null
    /**
     * Filter, which Funcao to fetch.
     */
    where: FuncaoWhereUniqueInput
  }


  /**
   * Funcao findFirst
   */
  export type FuncaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcao
     */
    select?: FuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FuncaoInclude<ExtArgs> | null
    /**
     * Filter, which Funcao to fetch.
     */
    where?: FuncaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcaos to fetch.
     */
    orderBy?: FuncaoOrderByWithRelationInput | FuncaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funcaos.
     */
    cursor?: FuncaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funcaos.
     */
    distinct?: FuncaoScalarFieldEnum | FuncaoScalarFieldEnum[]
  }


  /**
   * Funcao findFirstOrThrow
   */
  export type FuncaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcao
     */
    select?: FuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FuncaoInclude<ExtArgs> | null
    /**
     * Filter, which Funcao to fetch.
     */
    where?: FuncaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcaos to fetch.
     */
    orderBy?: FuncaoOrderByWithRelationInput | FuncaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funcaos.
     */
    cursor?: FuncaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funcaos.
     */
    distinct?: FuncaoScalarFieldEnum | FuncaoScalarFieldEnum[]
  }


  /**
   * Funcao findMany
   */
  export type FuncaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcao
     */
    select?: FuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FuncaoInclude<ExtArgs> | null
    /**
     * Filter, which Funcaos to fetch.
     */
    where?: FuncaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcaos to fetch.
     */
    orderBy?: FuncaoOrderByWithRelationInput | FuncaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Funcaos.
     */
    cursor?: FuncaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcaos.
     */
    skip?: number
    distinct?: FuncaoScalarFieldEnum | FuncaoScalarFieldEnum[]
  }


  /**
   * Funcao create
   */
  export type FuncaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcao
     */
    select?: FuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FuncaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Funcao.
     */
    data: XOR<FuncaoCreateInput, FuncaoUncheckedCreateInput>
  }


  /**
   * Funcao createMany
   */
  export type FuncaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Funcaos.
     */
    data: FuncaoCreateManyInput | FuncaoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Funcao update
   */
  export type FuncaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcao
     */
    select?: FuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FuncaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Funcao.
     */
    data: XOR<FuncaoUpdateInput, FuncaoUncheckedUpdateInput>
    /**
     * Choose, which Funcao to update.
     */
    where: FuncaoWhereUniqueInput
  }


  /**
   * Funcao updateMany
   */
  export type FuncaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Funcaos.
     */
    data: XOR<FuncaoUpdateManyMutationInput, FuncaoUncheckedUpdateManyInput>
    /**
     * Filter which Funcaos to update
     */
    where?: FuncaoWhereInput
  }


  /**
   * Funcao upsert
   */
  export type FuncaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcao
     */
    select?: FuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FuncaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Funcao to update in case it exists.
     */
    where: FuncaoWhereUniqueInput
    /**
     * In case the Funcao found by the `where` argument doesn't exist, create a new Funcao with this data.
     */
    create: XOR<FuncaoCreateInput, FuncaoUncheckedCreateInput>
    /**
     * In case the Funcao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FuncaoUpdateInput, FuncaoUncheckedUpdateInput>
  }


  /**
   * Funcao delete
   */
  export type FuncaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcao
     */
    select?: FuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FuncaoInclude<ExtArgs> | null
    /**
     * Filter which Funcao to delete.
     */
    where: FuncaoWhereUniqueInput
  }


  /**
   * Funcao deleteMany
   */
  export type FuncaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Funcaos to delete
     */
    where?: FuncaoWhereInput
  }


  /**
   * Funcao.userFuncao
   */
  export type Funcao$userFuncaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFuncao
     */
    select?: UserFuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFuncaoInclude<ExtArgs> | null
    where?: UserFuncaoWhereInput
    orderBy?: UserFuncaoOrderByWithRelationInput | UserFuncaoOrderByWithRelationInput[]
    cursor?: UserFuncaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserFuncaoScalarFieldEnum | UserFuncaoScalarFieldEnum[]
  }


  /**
   * Funcao without action
   */
  export type FuncaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcao
     */
    select?: FuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FuncaoInclude<ExtArgs> | null
  }



  /**
   * Model UserFuncao
   */

  export type AggregateUserFuncao = {
    _count: UserFuncaoCountAggregateOutputType | null
    _avg: UserFuncaoAvgAggregateOutputType | null
    _sum: UserFuncaoSumAggregateOutputType | null
    _min: UserFuncaoMinAggregateOutputType | null
    _max: UserFuncaoMaxAggregateOutputType | null
  }

  export type UserFuncaoAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    funcaoId: number | null
  }

  export type UserFuncaoSumAggregateOutputType = {
    id: number | null
    userId: number | null
    funcaoId: number | null
  }

  export type UserFuncaoMinAggregateOutputType = {
    id: number | null
    userId: number | null
    funcaoId: number | null
  }

  export type UserFuncaoMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    funcaoId: number | null
  }

  export type UserFuncaoCountAggregateOutputType = {
    id: number
    userId: number
    funcaoId: number
    _all: number
  }


  export type UserFuncaoAvgAggregateInputType = {
    id?: true
    userId?: true
    funcaoId?: true
  }

  export type UserFuncaoSumAggregateInputType = {
    id?: true
    userId?: true
    funcaoId?: true
  }

  export type UserFuncaoMinAggregateInputType = {
    id?: true
    userId?: true
    funcaoId?: true
  }

  export type UserFuncaoMaxAggregateInputType = {
    id?: true
    userId?: true
    funcaoId?: true
  }

  export type UserFuncaoCountAggregateInputType = {
    id?: true
    userId?: true
    funcaoId?: true
    _all?: true
  }

  export type UserFuncaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFuncao to aggregate.
     */
    where?: UserFuncaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFuncaos to fetch.
     */
    orderBy?: UserFuncaoOrderByWithRelationInput | UserFuncaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserFuncaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFuncaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFuncaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserFuncaos
    **/
    _count?: true | UserFuncaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserFuncaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserFuncaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserFuncaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserFuncaoMaxAggregateInputType
  }

  export type GetUserFuncaoAggregateType<T extends UserFuncaoAggregateArgs> = {
        [P in keyof T & keyof AggregateUserFuncao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserFuncao[P]>
      : GetScalarType<T[P], AggregateUserFuncao[P]>
  }




  export type UserFuncaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFuncaoWhereInput
    orderBy?: UserFuncaoOrderByWithAggregationInput | UserFuncaoOrderByWithAggregationInput[]
    by: UserFuncaoScalarFieldEnum[] | UserFuncaoScalarFieldEnum
    having?: UserFuncaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserFuncaoCountAggregateInputType | true
    _avg?: UserFuncaoAvgAggregateInputType
    _sum?: UserFuncaoSumAggregateInputType
    _min?: UserFuncaoMinAggregateInputType
    _max?: UserFuncaoMaxAggregateInputType
  }

  export type UserFuncaoGroupByOutputType = {
    id: number
    userId: number
    funcaoId: number
    _count: UserFuncaoCountAggregateOutputType | null
    _avg: UserFuncaoAvgAggregateOutputType | null
    _sum: UserFuncaoSumAggregateOutputType | null
    _min: UserFuncaoMinAggregateOutputType | null
    _max: UserFuncaoMaxAggregateOutputType | null
  }

  type GetUserFuncaoGroupByPayload<T extends UserFuncaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserFuncaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserFuncaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserFuncaoGroupByOutputType[P]>
            : GetScalarType<T[P], UserFuncaoGroupByOutputType[P]>
        }
      >
    >


  export type UserFuncaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    funcaoId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    funcao?: boolean | FuncaoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userFuncao"]>

  export type UserFuncaoSelectScalar = {
    id?: boolean
    userId?: boolean
    funcaoId?: boolean
  }

  export type UserFuncaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    funcao?: boolean | FuncaoDefaultArgs<ExtArgs>
  }


  export type $UserFuncaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserFuncao"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      funcao: Prisma.$FuncaoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      funcaoId: number
    }, ExtArgs["result"]["userFuncao"]>
    composites: {}
  }


  type UserFuncaoGetPayload<S extends boolean | null | undefined | UserFuncaoDefaultArgs> = $Result.GetResult<Prisma.$UserFuncaoPayload, S>

  type UserFuncaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFuncaoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserFuncaoCountAggregateInputType | true
    }

  export interface UserFuncaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserFuncao'], meta: { name: 'UserFuncao' } }
    /**
     * Find zero or one UserFuncao that matches the filter.
     * @param {UserFuncaoFindUniqueArgs} args - Arguments to find a UserFuncao
     * @example
     * // Get one UserFuncao
     * const userFuncao = await prisma.userFuncao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFuncaoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFuncaoFindUniqueArgs<ExtArgs>>
    ): Prisma__UserFuncaoClient<$Result.GetResult<Prisma.$UserFuncaoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserFuncao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFuncaoFindUniqueOrThrowArgs} args - Arguments to find a UserFuncao
     * @example
     * // Get one UserFuncao
     * const userFuncao = await prisma.userFuncao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFuncaoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFuncaoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserFuncaoClient<$Result.GetResult<Prisma.$UserFuncaoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserFuncao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFuncaoFindFirstArgs} args - Arguments to find a UserFuncao
     * @example
     * // Get one UserFuncao
     * const userFuncao = await prisma.userFuncao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFuncaoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFuncaoFindFirstArgs<ExtArgs>>
    ): Prisma__UserFuncaoClient<$Result.GetResult<Prisma.$UserFuncaoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserFuncao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFuncaoFindFirstOrThrowArgs} args - Arguments to find a UserFuncao
     * @example
     * // Get one UserFuncao
     * const userFuncao = await prisma.userFuncao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFuncaoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFuncaoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserFuncaoClient<$Result.GetResult<Prisma.$UserFuncaoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserFuncaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFuncaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserFuncaos
     * const userFuncaos = await prisma.userFuncao.findMany()
     * 
     * // Get first 10 UserFuncaos
     * const userFuncaos = await prisma.userFuncao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userFuncaoWithIdOnly = await prisma.userFuncao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFuncaoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFuncaoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFuncaoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserFuncao.
     * @param {UserFuncaoCreateArgs} args - Arguments to create a UserFuncao.
     * @example
     * // Create one UserFuncao
     * const UserFuncao = await prisma.userFuncao.create({
     *   data: {
     *     // ... data to create a UserFuncao
     *   }
     * })
     * 
    **/
    create<T extends UserFuncaoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserFuncaoCreateArgs<ExtArgs>>
    ): Prisma__UserFuncaoClient<$Result.GetResult<Prisma.$UserFuncaoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserFuncaos.
     *     @param {UserFuncaoCreateManyArgs} args - Arguments to create many UserFuncaos.
     *     @example
     *     // Create many UserFuncaos
     *     const userFuncao = await prisma.userFuncao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserFuncaoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFuncaoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserFuncao.
     * @param {UserFuncaoDeleteArgs} args - Arguments to delete one UserFuncao.
     * @example
     * // Delete one UserFuncao
     * const UserFuncao = await prisma.userFuncao.delete({
     *   where: {
     *     // ... filter to delete one UserFuncao
     *   }
     * })
     * 
    **/
    delete<T extends UserFuncaoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserFuncaoDeleteArgs<ExtArgs>>
    ): Prisma__UserFuncaoClient<$Result.GetResult<Prisma.$UserFuncaoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserFuncao.
     * @param {UserFuncaoUpdateArgs} args - Arguments to update one UserFuncao.
     * @example
     * // Update one UserFuncao
     * const userFuncao = await prisma.userFuncao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserFuncaoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserFuncaoUpdateArgs<ExtArgs>>
    ): Prisma__UserFuncaoClient<$Result.GetResult<Prisma.$UserFuncaoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserFuncaos.
     * @param {UserFuncaoDeleteManyArgs} args - Arguments to filter UserFuncaos to delete.
     * @example
     * // Delete a few UserFuncaos
     * const { count } = await prisma.userFuncao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserFuncaoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFuncaoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserFuncaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFuncaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserFuncaos
     * const userFuncao = await prisma.userFuncao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserFuncaoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserFuncaoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserFuncao.
     * @param {UserFuncaoUpsertArgs} args - Arguments to update or create a UserFuncao.
     * @example
     * // Update or create a UserFuncao
     * const userFuncao = await prisma.userFuncao.upsert({
     *   create: {
     *     // ... data to create a UserFuncao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserFuncao we want to update
     *   }
     * })
    **/
    upsert<T extends UserFuncaoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserFuncaoUpsertArgs<ExtArgs>>
    ): Prisma__UserFuncaoClient<$Result.GetResult<Prisma.$UserFuncaoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserFuncaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFuncaoCountArgs} args - Arguments to filter UserFuncaos to count.
     * @example
     * // Count the number of UserFuncaos
     * const count = await prisma.userFuncao.count({
     *   where: {
     *     // ... the filter for the UserFuncaos we want to count
     *   }
     * })
    **/
    count<T extends UserFuncaoCountArgs>(
      args?: Subset<T, UserFuncaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserFuncaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserFuncao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFuncaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserFuncaoAggregateArgs>(args: Subset<T, UserFuncaoAggregateArgs>): Prisma.PrismaPromise<GetUserFuncaoAggregateType<T>>

    /**
     * Group by UserFuncao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFuncaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserFuncaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserFuncaoGroupByArgs['orderBy'] }
        : { orderBy?: UserFuncaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserFuncaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserFuncaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserFuncao model
   */
  readonly fields: UserFuncaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserFuncao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserFuncaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    funcao<T extends FuncaoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FuncaoDefaultArgs<ExtArgs>>): Prisma__FuncaoClient<$Result.GetResult<Prisma.$FuncaoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserFuncao model
   */ 
  interface UserFuncaoFieldRefs {
    readonly id: FieldRef<"UserFuncao", 'Int'>
    readonly userId: FieldRef<"UserFuncao", 'Int'>
    readonly funcaoId: FieldRef<"UserFuncao", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * UserFuncao findUnique
   */
  export type UserFuncaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFuncao
     */
    select?: UserFuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFuncaoInclude<ExtArgs> | null
    /**
     * Filter, which UserFuncao to fetch.
     */
    where: UserFuncaoWhereUniqueInput
  }


  /**
   * UserFuncao findUniqueOrThrow
   */
  export type UserFuncaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFuncao
     */
    select?: UserFuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFuncaoInclude<ExtArgs> | null
    /**
     * Filter, which UserFuncao to fetch.
     */
    where: UserFuncaoWhereUniqueInput
  }


  /**
   * UserFuncao findFirst
   */
  export type UserFuncaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFuncao
     */
    select?: UserFuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFuncaoInclude<ExtArgs> | null
    /**
     * Filter, which UserFuncao to fetch.
     */
    where?: UserFuncaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFuncaos to fetch.
     */
    orderBy?: UserFuncaoOrderByWithRelationInput | UserFuncaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFuncaos.
     */
    cursor?: UserFuncaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFuncaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFuncaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFuncaos.
     */
    distinct?: UserFuncaoScalarFieldEnum | UserFuncaoScalarFieldEnum[]
  }


  /**
   * UserFuncao findFirstOrThrow
   */
  export type UserFuncaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFuncao
     */
    select?: UserFuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFuncaoInclude<ExtArgs> | null
    /**
     * Filter, which UserFuncao to fetch.
     */
    where?: UserFuncaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFuncaos to fetch.
     */
    orderBy?: UserFuncaoOrderByWithRelationInput | UserFuncaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFuncaos.
     */
    cursor?: UserFuncaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFuncaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFuncaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFuncaos.
     */
    distinct?: UserFuncaoScalarFieldEnum | UserFuncaoScalarFieldEnum[]
  }


  /**
   * UserFuncao findMany
   */
  export type UserFuncaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFuncao
     */
    select?: UserFuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFuncaoInclude<ExtArgs> | null
    /**
     * Filter, which UserFuncaos to fetch.
     */
    where?: UserFuncaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFuncaos to fetch.
     */
    orderBy?: UserFuncaoOrderByWithRelationInput | UserFuncaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserFuncaos.
     */
    cursor?: UserFuncaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFuncaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFuncaos.
     */
    skip?: number
    distinct?: UserFuncaoScalarFieldEnum | UserFuncaoScalarFieldEnum[]
  }


  /**
   * UserFuncao create
   */
  export type UserFuncaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFuncao
     */
    select?: UserFuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFuncaoInclude<ExtArgs> | null
    /**
     * The data needed to create a UserFuncao.
     */
    data: XOR<UserFuncaoCreateInput, UserFuncaoUncheckedCreateInput>
  }


  /**
   * UserFuncao createMany
   */
  export type UserFuncaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserFuncaos.
     */
    data: UserFuncaoCreateManyInput | UserFuncaoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UserFuncao update
   */
  export type UserFuncaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFuncao
     */
    select?: UserFuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFuncaoInclude<ExtArgs> | null
    /**
     * The data needed to update a UserFuncao.
     */
    data: XOR<UserFuncaoUpdateInput, UserFuncaoUncheckedUpdateInput>
    /**
     * Choose, which UserFuncao to update.
     */
    where: UserFuncaoWhereUniqueInput
  }


  /**
   * UserFuncao updateMany
   */
  export type UserFuncaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserFuncaos.
     */
    data: XOR<UserFuncaoUpdateManyMutationInput, UserFuncaoUncheckedUpdateManyInput>
    /**
     * Filter which UserFuncaos to update
     */
    where?: UserFuncaoWhereInput
  }


  /**
   * UserFuncao upsert
   */
  export type UserFuncaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFuncao
     */
    select?: UserFuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFuncaoInclude<ExtArgs> | null
    /**
     * The filter to search for the UserFuncao to update in case it exists.
     */
    where: UserFuncaoWhereUniqueInput
    /**
     * In case the UserFuncao found by the `where` argument doesn't exist, create a new UserFuncao with this data.
     */
    create: XOR<UserFuncaoCreateInput, UserFuncaoUncheckedCreateInput>
    /**
     * In case the UserFuncao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserFuncaoUpdateInput, UserFuncaoUncheckedUpdateInput>
  }


  /**
   * UserFuncao delete
   */
  export type UserFuncaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFuncao
     */
    select?: UserFuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFuncaoInclude<ExtArgs> | null
    /**
     * Filter which UserFuncao to delete.
     */
    where: UserFuncaoWhereUniqueInput
  }


  /**
   * UserFuncao deleteMany
   */
  export type UserFuncaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFuncaos to delete
     */
    where?: UserFuncaoWhereInput
  }


  /**
   * UserFuncao without action
   */
  export type UserFuncaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFuncao
     */
    select?: UserFuncaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFuncaoInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FuncaoScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type FuncaoScalarFieldEnum = (typeof FuncaoScalarFieldEnum)[keyof typeof FuncaoScalarFieldEnum]


  export const UserFuncaoScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    funcaoId: 'funcaoId'
  };

  export type UserFuncaoScalarFieldEnum = (typeof UserFuncaoScalarFieldEnum)[keyof typeof UserFuncaoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    userFuncao?: UserFuncaoListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    userFuncao?: UserFuncaoOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    userFuncao?: UserFuncaoListRelationFilter
  }, "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type FuncaoWhereInput = {
    AND?: FuncaoWhereInput | FuncaoWhereInput[]
    OR?: FuncaoWhereInput[]
    NOT?: FuncaoWhereInput | FuncaoWhereInput[]
    id?: IntFilter<"Funcao"> | number
    nome?: StringFilter<"Funcao"> | string
    userFuncao?: UserFuncaoListRelationFilter
  }

  export type FuncaoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    userFuncao?: UserFuncaoOrderByRelationAggregateInput
  }

  export type FuncaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FuncaoWhereInput | FuncaoWhereInput[]
    OR?: FuncaoWhereInput[]
    NOT?: FuncaoWhereInput | FuncaoWhereInput[]
    nome?: StringFilter<"Funcao"> | string
    userFuncao?: UserFuncaoListRelationFilter
  }, "id">

  export type FuncaoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: FuncaoCountOrderByAggregateInput
    _avg?: FuncaoAvgOrderByAggregateInput
    _max?: FuncaoMaxOrderByAggregateInput
    _min?: FuncaoMinOrderByAggregateInput
    _sum?: FuncaoSumOrderByAggregateInput
  }

  export type FuncaoScalarWhereWithAggregatesInput = {
    AND?: FuncaoScalarWhereWithAggregatesInput | FuncaoScalarWhereWithAggregatesInput[]
    OR?: FuncaoScalarWhereWithAggregatesInput[]
    NOT?: FuncaoScalarWhereWithAggregatesInput | FuncaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Funcao"> | number
    nome?: StringWithAggregatesFilter<"Funcao"> | string
  }

  export type UserFuncaoWhereInput = {
    AND?: UserFuncaoWhereInput | UserFuncaoWhereInput[]
    OR?: UserFuncaoWhereInput[]
    NOT?: UserFuncaoWhereInput | UserFuncaoWhereInput[]
    id?: IntFilter<"UserFuncao"> | number
    userId?: IntFilter<"UserFuncao"> | number
    funcaoId?: IntFilter<"UserFuncao"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    funcao?: XOR<FuncaoRelationFilter, FuncaoWhereInput>
  }

  export type UserFuncaoOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    funcaoId?: SortOrder
    user?: UserOrderByWithRelationInput
    funcao?: FuncaoOrderByWithRelationInput
  }

  export type UserFuncaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserFuncaoWhereInput | UserFuncaoWhereInput[]
    OR?: UserFuncaoWhereInput[]
    NOT?: UserFuncaoWhereInput | UserFuncaoWhereInput[]
    userId?: IntFilter<"UserFuncao"> | number
    funcaoId?: IntFilter<"UserFuncao"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    funcao?: XOR<FuncaoRelationFilter, FuncaoWhereInput>
  }, "id">

  export type UserFuncaoOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    funcaoId?: SortOrder
    _count?: UserFuncaoCountOrderByAggregateInput
    _avg?: UserFuncaoAvgOrderByAggregateInput
    _max?: UserFuncaoMaxOrderByAggregateInput
    _min?: UserFuncaoMinOrderByAggregateInput
    _sum?: UserFuncaoSumOrderByAggregateInput
  }

  export type UserFuncaoScalarWhereWithAggregatesInput = {
    AND?: UserFuncaoScalarWhereWithAggregatesInput | UserFuncaoScalarWhereWithAggregatesInput[]
    OR?: UserFuncaoScalarWhereWithAggregatesInput[]
    NOT?: UserFuncaoScalarWhereWithAggregatesInput | UserFuncaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserFuncao"> | number
    userId?: IntWithAggregatesFilter<"UserFuncao"> | number
    funcaoId?: IntWithAggregatesFilter<"UserFuncao"> | number
  }

  export type UserCreateInput = {
    username: string
    password: string
    userFuncao?: UserFuncaoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    userFuncao?: UserFuncaoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userFuncao?: UserFuncaoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userFuncao?: UserFuncaoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type FuncaoCreateInput = {
    nome: string
    userFuncao?: UserFuncaoCreateNestedManyWithoutFuncaoInput
  }

  export type FuncaoUncheckedCreateInput = {
    id?: number
    nome: string
    userFuncao?: UserFuncaoUncheckedCreateNestedManyWithoutFuncaoInput
  }

  export type FuncaoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    userFuncao?: UserFuncaoUpdateManyWithoutFuncaoNestedInput
  }

  export type FuncaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    userFuncao?: UserFuncaoUncheckedUpdateManyWithoutFuncaoNestedInput
  }

  export type FuncaoCreateManyInput = {
    id?: number
    nome: string
  }

  export type FuncaoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type FuncaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type UserFuncaoCreateInput = {
    user: UserCreateNestedOneWithoutUserFuncaoInput
    funcao: FuncaoCreateNestedOneWithoutUserFuncaoInput
  }

  export type UserFuncaoUncheckedCreateInput = {
    id?: number
    userId: number
    funcaoId: number
  }

  export type UserFuncaoUpdateInput = {
    user?: UserUpdateOneRequiredWithoutUserFuncaoNestedInput
    funcao?: FuncaoUpdateOneRequiredWithoutUserFuncaoNestedInput
  }

  export type UserFuncaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    funcaoId?: IntFieldUpdateOperationsInput | number
  }

  export type UserFuncaoCreateManyInput = {
    id?: number
    userId: number
    funcaoId: number
  }

  export type UserFuncaoUpdateManyMutationInput = {

  }

  export type UserFuncaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    funcaoId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserFuncaoListRelationFilter = {
    every?: UserFuncaoWhereInput
    some?: UserFuncaoWhereInput
    none?: UserFuncaoWhereInput
  }

  export type UserFuncaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FuncaoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type FuncaoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FuncaoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type FuncaoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type FuncaoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FuncaoRelationFilter = {
    is?: FuncaoWhereInput
    isNot?: FuncaoWhereInput
  }

  export type UserFuncaoCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    funcaoId?: SortOrder
  }

  export type UserFuncaoAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    funcaoId?: SortOrder
  }

  export type UserFuncaoMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    funcaoId?: SortOrder
  }

  export type UserFuncaoMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    funcaoId?: SortOrder
  }

  export type UserFuncaoSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    funcaoId?: SortOrder
  }

  export type UserFuncaoCreateNestedManyWithoutUserInput = {
    create?: XOR<UserFuncaoCreateWithoutUserInput, UserFuncaoUncheckedCreateWithoutUserInput> | UserFuncaoCreateWithoutUserInput[] | UserFuncaoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFuncaoCreateOrConnectWithoutUserInput | UserFuncaoCreateOrConnectWithoutUserInput[]
    createMany?: UserFuncaoCreateManyUserInputEnvelope
    connect?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
  }

  export type UserFuncaoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserFuncaoCreateWithoutUserInput, UserFuncaoUncheckedCreateWithoutUserInput> | UserFuncaoCreateWithoutUserInput[] | UserFuncaoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFuncaoCreateOrConnectWithoutUserInput | UserFuncaoCreateOrConnectWithoutUserInput[]
    createMany?: UserFuncaoCreateManyUserInputEnvelope
    connect?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserFuncaoUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserFuncaoCreateWithoutUserInput, UserFuncaoUncheckedCreateWithoutUserInput> | UserFuncaoCreateWithoutUserInput[] | UserFuncaoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFuncaoCreateOrConnectWithoutUserInput | UserFuncaoCreateOrConnectWithoutUserInput[]
    upsert?: UserFuncaoUpsertWithWhereUniqueWithoutUserInput | UserFuncaoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserFuncaoCreateManyUserInputEnvelope
    set?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    disconnect?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    delete?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    connect?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    update?: UserFuncaoUpdateWithWhereUniqueWithoutUserInput | UserFuncaoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserFuncaoUpdateManyWithWhereWithoutUserInput | UserFuncaoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserFuncaoScalarWhereInput | UserFuncaoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserFuncaoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserFuncaoCreateWithoutUserInput, UserFuncaoUncheckedCreateWithoutUserInput> | UserFuncaoCreateWithoutUserInput[] | UserFuncaoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFuncaoCreateOrConnectWithoutUserInput | UserFuncaoCreateOrConnectWithoutUserInput[]
    upsert?: UserFuncaoUpsertWithWhereUniqueWithoutUserInput | UserFuncaoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserFuncaoCreateManyUserInputEnvelope
    set?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    disconnect?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    delete?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    connect?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    update?: UserFuncaoUpdateWithWhereUniqueWithoutUserInput | UserFuncaoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserFuncaoUpdateManyWithWhereWithoutUserInput | UserFuncaoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserFuncaoScalarWhereInput | UserFuncaoScalarWhereInput[]
  }

  export type UserFuncaoCreateNestedManyWithoutFuncaoInput = {
    create?: XOR<UserFuncaoCreateWithoutFuncaoInput, UserFuncaoUncheckedCreateWithoutFuncaoInput> | UserFuncaoCreateWithoutFuncaoInput[] | UserFuncaoUncheckedCreateWithoutFuncaoInput[]
    connectOrCreate?: UserFuncaoCreateOrConnectWithoutFuncaoInput | UserFuncaoCreateOrConnectWithoutFuncaoInput[]
    createMany?: UserFuncaoCreateManyFuncaoInputEnvelope
    connect?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
  }

  export type UserFuncaoUncheckedCreateNestedManyWithoutFuncaoInput = {
    create?: XOR<UserFuncaoCreateWithoutFuncaoInput, UserFuncaoUncheckedCreateWithoutFuncaoInput> | UserFuncaoCreateWithoutFuncaoInput[] | UserFuncaoUncheckedCreateWithoutFuncaoInput[]
    connectOrCreate?: UserFuncaoCreateOrConnectWithoutFuncaoInput | UserFuncaoCreateOrConnectWithoutFuncaoInput[]
    createMany?: UserFuncaoCreateManyFuncaoInputEnvelope
    connect?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
  }

  export type UserFuncaoUpdateManyWithoutFuncaoNestedInput = {
    create?: XOR<UserFuncaoCreateWithoutFuncaoInput, UserFuncaoUncheckedCreateWithoutFuncaoInput> | UserFuncaoCreateWithoutFuncaoInput[] | UserFuncaoUncheckedCreateWithoutFuncaoInput[]
    connectOrCreate?: UserFuncaoCreateOrConnectWithoutFuncaoInput | UserFuncaoCreateOrConnectWithoutFuncaoInput[]
    upsert?: UserFuncaoUpsertWithWhereUniqueWithoutFuncaoInput | UserFuncaoUpsertWithWhereUniqueWithoutFuncaoInput[]
    createMany?: UserFuncaoCreateManyFuncaoInputEnvelope
    set?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    disconnect?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    delete?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    connect?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    update?: UserFuncaoUpdateWithWhereUniqueWithoutFuncaoInput | UserFuncaoUpdateWithWhereUniqueWithoutFuncaoInput[]
    updateMany?: UserFuncaoUpdateManyWithWhereWithoutFuncaoInput | UserFuncaoUpdateManyWithWhereWithoutFuncaoInput[]
    deleteMany?: UserFuncaoScalarWhereInput | UserFuncaoScalarWhereInput[]
  }

  export type UserFuncaoUncheckedUpdateManyWithoutFuncaoNestedInput = {
    create?: XOR<UserFuncaoCreateWithoutFuncaoInput, UserFuncaoUncheckedCreateWithoutFuncaoInput> | UserFuncaoCreateWithoutFuncaoInput[] | UserFuncaoUncheckedCreateWithoutFuncaoInput[]
    connectOrCreate?: UserFuncaoCreateOrConnectWithoutFuncaoInput | UserFuncaoCreateOrConnectWithoutFuncaoInput[]
    upsert?: UserFuncaoUpsertWithWhereUniqueWithoutFuncaoInput | UserFuncaoUpsertWithWhereUniqueWithoutFuncaoInput[]
    createMany?: UserFuncaoCreateManyFuncaoInputEnvelope
    set?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    disconnect?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    delete?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    connect?: UserFuncaoWhereUniqueInput | UserFuncaoWhereUniqueInput[]
    update?: UserFuncaoUpdateWithWhereUniqueWithoutFuncaoInput | UserFuncaoUpdateWithWhereUniqueWithoutFuncaoInput[]
    updateMany?: UserFuncaoUpdateManyWithWhereWithoutFuncaoInput | UserFuncaoUpdateManyWithWhereWithoutFuncaoInput[]
    deleteMany?: UserFuncaoScalarWhereInput | UserFuncaoScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserFuncaoInput = {
    create?: XOR<UserCreateWithoutUserFuncaoInput, UserUncheckedCreateWithoutUserFuncaoInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserFuncaoInput
    connect?: UserWhereUniqueInput
  }

  export type FuncaoCreateNestedOneWithoutUserFuncaoInput = {
    create?: XOR<FuncaoCreateWithoutUserFuncaoInput, FuncaoUncheckedCreateWithoutUserFuncaoInput>
    connectOrCreate?: FuncaoCreateOrConnectWithoutUserFuncaoInput
    connect?: FuncaoWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserFuncaoNestedInput = {
    create?: XOR<UserCreateWithoutUserFuncaoInput, UserUncheckedCreateWithoutUserFuncaoInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserFuncaoInput
    upsert?: UserUpsertWithoutUserFuncaoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserFuncaoInput, UserUpdateWithoutUserFuncaoInput>, UserUncheckedUpdateWithoutUserFuncaoInput>
  }

  export type FuncaoUpdateOneRequiredWithoutUserFuncaoNestedInput = {
    create?: XOR<FuncaoCreateWithoutUserFuncaoInput, FuncaoUncheckedCreateWithoutUserFuncaoInput>
    connectOrCreate?: FuncaoCreateOrConnectWithoutUserFuncaoInput
    upsert?: FuncaoUpsertWithoutUserFuncaoInput
    connect?: FuncaoWhereUniqueInput
    update?: XOR<XOR<FuncaoUpdateToOneWithWhereWithoutUserFuncaoInput, FuncaoUpdateWithoutUserFuncaoInput>, FuncaoUncheckedUpdateWithoutUserFuncaoInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UserFuncaoCreateWithoutUserInput = {
    funcao: FuncaoCreateNestedOneWithoutUserFuncaoInput
  }

  export type UserFuncaoUncheckedCreateWithoutUserInput = {
    id?: number
    funcaoId: number
  }

  export type UserFuncaoCreateOrConnectWithoutUserInput = {
    where: UserFuncaoWhereUniqueInput
    create: XOR<UserFuncaoCreateWithoutUserInput, UserFuncaoUncheckedCreateWithoutUserInput>
  }

  export type UserFuncaoCreateManyUserInputEnvelope = {
    data: UserFuncaoCreateManyUserInput | UserFuncaoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserFuncaoUpsertWithWhereUniqueWithoutUserInput = {
    where: UserFuncaoWhereUniqueInput
    update: XOR<UserFuncaoUpdateWithoutUserInput, UserFuncaoUncheckedUpdateWithoutUserInput>
    create: XOR<UserFuncaoCreateWithoutUserInput, UserFuncaoUncheckedCreateWithoutUserInput>
  }

  export type UserFuncaoUpdateWithWhereUniqueWithoutUserInput = {
    where: UserFuncaoWhereUniqueInput
    data: XOR<UserFuncaoUpdateWithoutUserInput, UserFuncaoUncheckedUpdateWithoutUserInput>
  }

  export type UserFuncaoUpdateManyWithWhereWithoutUserInput = {
    where: UserFuncaoScalarWhereInput
    data: XOR<UserFuncaoUpdateManyMutationInput, UserFuncaoUncheckedUpdateManyWithoutUserInput>
  }

  export type UserFuncaoScalarWhereInput = {
    AND?: UserFuncaoScalarWhereInput | UserFuncaoScalarWhereInput[]
    OR?: UserFuncaoScalarWhereInput[]
    NOT?: UserFuncaoScalarWhereInput | UserFuncaoScalarWhereInput[]
    id?: IntFilter<"UserFuncao"> | number
    userId?: IntFilter<"UserFuncao"> | number
    funcaoId?: IntFilter<"UserFuncao"> | number
  }

  export type UserFuncaoCreateWithoutFuncaoInput = {
    user: UserCreateNestedOneWithoutUserFuncaoInput
  }

  export type UserFuncaoUncheckedCreateWithoutFuncaoInput = {
    id?: number
    userId: number
  }

  export type UserFuncaoCreateOrConnectWithoutFuncaoInput = {
    where: UserFuncaoWhereUniqueInput
    create: XOR<UserFuncaoCreateWithoutFuncaoInput, UserFuncaoUncheckedCreateWithoutFuncaoInput>
  }

  export type UserFuncaoCreateManyFuncaoInputEnvelope = {
    data: UserFuncaoCreateManyFuncaoInput | UserFuncaoCreateManyFuncaoInput[]
    skipDuplicates?: boolean
  }

  export type UserFuncaoUpsertWithWhereUniqueWithoutFuncaoInput = {
    where: UserFuncaoWhereUniqueInput
    update: XOR<UserFuncaoUpdateWithoutFuncaoInput, UserFuncaoUncheckedUpdateWithoutFuncaoInput>
    create: XOR<UserFuncaoCreateWithoutFuncaoInput, UserFuncaoUncheckedCreateWithoutFuncaoInput>
  }

  export type UserFuncaoUpdateWithWhereUniqueWithoutFuncaoInput = {
    where: UserFuncaoWhereUniqueInput
    data: XOR<UserFuncaoUpdateWithoutFuncaoInput, UserFuncaoUncheckedUpdateWithoutFuncaoInput>
  }

  export type UserFuncaoUpdateManyWithWhereWithoutFuncaoInput = {
    where: UserFuncaoScalarWhereInput
    data: XOR<UserFuncaoUpdateManyMutationInput, UserFuncaoUncheckedUpdateManyWithoutFuncaoInput>
  }

  export type UserCreateWithoutUserFuncaoInput = {
    username: string
    password: string
  }

  export type UserUncheckedCreateWithoutUserFuncaoInput = {
    id?: number
    username: string
    password: string
  }

  export type UserCreateOrConnectWithoutUserFuncaoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserFuncaoInput, UserUncheckedCreateWithoutUserFuncaoInput>
  }

  export type FuncaoCreateWithoutUserFuncaoInput = {
    nome: string
  }

  export type FuncaoUncheckedCreateWithoutUserFuncaoInput = {
    id?: number
    nome: string
  }

  export type FuncaoCreateOrConnectWithoutUserFuncaoInput = {
    where: FuncaoWhereUniqueInput
    create: XOR<FuncaoCreateWithoutUserFuncaoInput, FuncaoUncheckedCreateWithoutUserFuncaoInput>
  }

  export type UserUpsertWithoutUserFuncaoInput = {
    update: XOR<UserUpdateWithoutUserFuncaoInput, UserUncheckedUpdateWithoutUserFuncaoInput>
    create: XOR<UserCreateWithoutUserFuncaoInput, UserUncheckedCreateWithoutUserFuncaoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserFuncaoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserFuncaoInput, UserUncheckedUpdateWithoutUserFuncaoInput>
  }

  export type UserUpdateWithoutUserFuncaoInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateWithoutUserFuncaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type FuncaoUpsertWithoutUserFuncaoInput = {
    update: XOR<FuncaoUpdateWithoutUserFuncaoInput, FuncaoUncheckedUpdateWithoutUserFuncaoInput>
    create: XOR<FuncaoCreateWithoutUserFuncaoInput, FuncaoUncheckedCreateWithoutUserFuncaoInput>
    where?: FuncaoWhereInput
  }

  export type FuncaoUpdateToOneWithWhereWithoutUserFuncaoInput = {
    where?: FuncaoWhereInput
    data: XOR<FuncaoUpdateWithoutUserFuncaoInput, FuncaoUncheckedUpdateWithoutUserFuncaoInput>
  }

  export type FuncaoUpdateWithoutUserFuncaoInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type FuncaoUncheckedUpdateWithoutUserFuncaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type UserFuncaoCreateManyUserInput = {
    id?: number
    funcaoId: number
  }

  export type UserFuncaoUpdateWithoutUserInput = {
    funcao?: FuncaoUpdateOneRequiredWithoutUserFuncaoNestedInput
  }

  export type UserFuncaoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    funcaoId?: IntFieldUpdateOperationsInput | number
  }

  export type UserFuncaoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    funcaoId?: IntFieldUpdateOperationsInput | number
  }

  export type UserFuncaoCreateManyFuncaoInput = {
    id?: number
    userId: number
  }

  export type UserFuncaoUpdateWithoutFuncaoInput = {
    user?: UserUpdateOneRequiredWithoutUserFuncaoNestedInput
  }

  export type UserFuncaoUncheckedUpdateWithoutFuncaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserFuncaoUncheckedUpdateManyWithoutFuncaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FuncaoCountOutputTypeDefaultArgs instead
     */
    export type FuncaoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FuncaoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FuncaoDefaultArgs instead
     */
    export type FuncaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FuncaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserFuncaoDefaultArgs instead
     */
    export type UserFuncaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserFuncaoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}